type Route {
  routeId: ID!
  distanceKm: Float
  duration: Int
  path: String
  description: String
}

input RouteInput {
  routeId: ID!
  distanceKm: Float
  duration: Int
  path: String
  description: String
}

type ErrorPayload {
  message: String!
  payload: AWSJSON
  correlationId: ID
  version: Int!
}

"""All mutations require a payload version."""
type Mutation {
  publishRoutesGenerated(jobId: ID!, routes: [RouteInput]!, correlationId: ID, version: Int!): [Route] # version: payload schema version
  publishFavouriteSaved(email: String!, routeId: ID!, version: Int!): ID # version: payload schema version
  publishFavouriteDeleted(email: String!, routeId: ID!, version: Int!): ID # version: payload schema version
  publishRouteStarted(email: String!, routeId: ID!, version: Int!): ID # version: payload schema version
  publishRouteFinished(email: String!, routeId: ID!, summary: String!, version: Int!): ID # version: payload schema version
  publishErrorOccurred(message: String!, payload: AWSJSON, correlationId: ID, version: Int!): ErrorPayload # version: payload schema version
}

type Subscription {
  onRoutesGenerated(jobId: ID!): [Route]
    @aws_subscribe(mutations: ["publishRoutesGenerated"])
  onFavouriteSaved(email: String!, routeId: ID!): ID
    @aws_subscribe(mutations: ["publishFavouriteSaved"])
  onFavouriteDeleted(email: String!, routeId: ID!): ID
    @aws_subscribe(mutations: ["publishFavouriteDeleted"])
  onRouteStarted(email: String!, routeId: ID!): ID
    @aws_subscribe(mutations: ["publishRouteStarted"])
  onRouteFinished(email: String!, routeId: ID!, summary: String!): ID
    @aws_subscribe(mutations: ["publishRouteFinished"])
  onErrorOccurred(correlationId: ID!): ErrorPayload
    @aws_subscribe(mutations: ["publishErrorOccurred"])
}

type Query {
  _dummy: String
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
